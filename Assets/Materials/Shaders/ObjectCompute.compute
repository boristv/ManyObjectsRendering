#pragma kernel cs_main
#include <UnityShaderVariables.cginc>

struct mesh_data
{
    float3 basePos;
    float offsetY;
    float4x4 mat;
    float amount;
};

void rotate_2d(inout float2 v, const float r)
{
    float s, c;
    sincos(r, s, c);
    v = float2(v.x * c - v.y * s, v.x * s + v.y * c);
}

float hash(float n)
{
    return frac(sin(n) * 43758.5453);
}
            
float customNoise(float2 x)
{
    float2 p = floor(x);
    float2 f = frac(x);
            
    f = f * f * (3.0 - 2.0 * f);
    float n = p.x + p.y * 57.0;
            
    return lerp(lerp(lerp(hash(n + 0.0), hash(n + 1.0), f.x),
                            lerp(hash(n + 57.0), hash(n + 58.0), f.x), f.y),
                            lerp(lerp(hash(n + 113.0), hash(n + 114.0), f.x),
                                lerp(hash(n + 170.0), hash(n + 171.0), f.x), f.y), 0);
}

RWStructuredBuffer<mesh_data> data;
float3 pusher_position;
float3 _lastPos = float3(0, 0, 0);

[numthreads(64,1,1)]
void cs_main(uint3 id : SV_DispatchThreadID)
{
    float4x4 mat = data[id.x].mat;
    float3 base_pos = data[id.x].basePos;
    
    const float BURST_HEIGHT_SCALE = 2.5;
    const float NOISE_SCALE = 0.2;
    const float DEPTH_OFFSET = 1;
    
    float3 start = data[id.x].basePos;
    float yOffset = data[id.x].offsetY;
    
    const float time = _Time.y;
    const float3 pos = start + _lastPos;
    const float t = smoothstep(yOffset, BURST_HEIGHT_SCALE + yOffset, pos.y);
    const float y = BURST_HEIGHT_SCALE * customNoise(float2(pos.x * NOISE_SCALE + time, pos.z * NOISE_SCALE + time)) + yOffset * DEPTH_OFFSET;
    float3 newPos = float3(pos.x, y, pos.z);
    _lastPos = newPos - start;
    
    const float3 position = float3(mat[0][3], mat[1][3], mat[2][3]);
    const float dist = distance(position, pusher_position);
    
    const float amount = smoothstep(30, 0, dist);
    
    float3 dir = normalize(base_pos - pusher_position);
    dir.y = 0;
    const float3 push_amount = dir * lerp(0, 20, amount);
    newPos = newPos + push_amount;
    
    mat[0][3] = newPos.x;
    mat[1][3] = newPos.y;
    mat[2][3] = newPos.z;
    
    data[id.x].mat = mat;
    data[id.x].amount = amount;
}
